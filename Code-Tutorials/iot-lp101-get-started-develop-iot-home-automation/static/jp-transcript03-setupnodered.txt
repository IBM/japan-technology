Raspberry Pi 上の Node-RED をセットアップします。まず始めに、.local アドレスを使って Raspberry Pi に SSH で接続します。初めて接続するときには、このアドレスを SSH で既知となっているホスト・ファイルに保存するよう求められるので、Pi ユーザーのデフォルト・パスワードを入力します。デフォルトのパスワードは、raspberry です。デフォルト・パスワードを変更するまでは、(Raspberry Pi に接続するたびに) パスワードを変更するよう求められるので、セキュリティー上の理由から最初から変更しておくことが賢明です。password コマンドを使用して、古いパスワード、つまり raspberry を入力し、新しいパスワードを入力して確認のために再入力し、新しいパスワードを設定します。この作業が終われば、Node-RED の実行を開始できる状態になります。

Raspberry Pi 上では、Node-RED 関連のさまざまなコマンドを使用できます。コマンド・ラインで node-red と入力して Tab キーを何回か押すことで、さまざまなコマンドが表示されます。このように、node-red-pi、node-red-start、node-red-stop などがあります。手作業で Node-RED を起動するには、node-red-start を使用します。この方法で起動すると、Node-RED に関する情報がターミナルに出力されて、他のいくつかのコマンド、さまざまな起動方法がわかります。最も重要な情報は、IP アドレス、サーバー・アドレス、ポートです。この情報を使用して、PC または Mac から Node-RED にアクセスします。

先に進める前に、Ctrl+C を押して (Node-RED を) キャンセルします。Node-RED、node、nmp を更新するために、update-node-red コマンドを使います。ここに示されるように、このコマンドは古いバージョンを削除して、npm リポジトリーから取得してきた最新バージョンの node、npm、Node-RED で置き換えます。コマンドの実行が完了するまでには少々時間がかかるので、数分して完了した頃にこの画面に戻ります。


これで、node と Node-RED がアップグレードされました。node-red-start コマンドを実行すると、noed と Node-RED のバージョンが更新されていることを確認できます。(バージョンは) Node-RED を起動すると表示される通知メッセージに出力されます。ここです。Node-RED サービスの URL とポートの情報も、このメッセージから入手できるので、その情報を Web ブラウザーにコピーすることができます。使用するブラウザーとしては、Firefox または Chrome が最適です。ここでは Chrome を使います。ここにアドレスをコピーして、Node-RED にアクセスします。

これが、Node-RED ユーザー・インターフェースです。脇に並んでいるノードを使用して、IoT フローをプログラミングすることができます。入力、出力、関数のノードがあります。スクロールダウンすると、Raspberry Pi 専用に設計された、さまざまなノードがあることがわかります。これらのノードです。Raspberry Pi GPIO ノードは、Raspberry Pi 上のGPIO ピンに接続されたコンポーネントの制御や読み取りを行うときに役立ちます。これがセンサー用のノード、これがアクチュエーターなどの出力用のノードです。他にも、Raspberry Pi 上の SenseHat といったものに関連するいくつかのノードがあります。

これらのノードはすべて、npm モジュールからインストールされています。メニューを表示して、「Manage Pallette (パレットの管理)」を選択します。ノードのそれぞれが、どの特定のモジュールからインストールされているのかを確認できます。組み込みノードについては、ノードのリストを見るとわかるように、node-red パッケージからインストールされています。他のパッケージからインストールされているノードもあります。例えば、IBM Watson IoT からは、これらのノードが提供されています。このように多種多様なノードが、Raspbian Jessie のインストール時にデフォルトでインストールされます。コントリビュー
ションとして提供されているモジュールを追加して、ノードを追加することもできます。それには、「Install (インストール)」タブを表示します。ホーム・オートメーションのパッケージを検索するとしたら、「home」と入力して検索すると、このように、さまざまなモジュールを利用できるようになっていることがわかります。例えば、Alexa ホーム・スキル・モジュール、回線コントローラー・モジュールがあります。各種のホーム・オートメーション・フレームワークに関連するモジュールもあります。MQTT モジュールがあります。

私にとって特に興味深いのは、この Apple HomeKit デバイス用のホーム・キット・モジュールです。「Install (インストール)」をクリックすると、詳しい情報が表示されて、クリックしてこのモジュールの Web サイトにアクセスできるようになっています。インストールする前に、サイトにアクセスして、その特定のノード・モジュールを稼働させるために必要な依存関係があるのかどうかを調べることが賢明です。このモジュールの場合、依存関係があります。これらのライブラリーをインストールして、Bonjour サポートが Raspberry Pi 上で実行されるようにすることが必要です。この sudo update インストール・コマンドと依存関係のリストをコピーすれば、コマンド・ラインに戻って依存関係をインストールすることができます。Ctrl+C を押して Node-RED をキャンセルし、コマンドを実行してパッケージをインストールします。1 分ほどでインストールできるはずです。確認メッセージに対しては、すべてのパッケージをインストールすると確認してください。

インストールが完了すると、コマンド・ラインから npm を使って node-red モジュールをインストールすることも、Node-RED ユーザー・インターフェースに戻ってグラフィカル・ユーザー・インターフェースを使ってインストールすることもできるようになります。このように、いくつものパッケージがインストールされていることがわかります。これで、またNode-RED を実行できます。けれども今回は、node-red-start を使って手作業で実行するのではなく、サービスとしてのシステム制御を使用して Node-RED を実行できます。それには、sudo system control と入力し、Node-RED サービスを有効にする必要があります。サービスの名前がわからない場合は、履歴をたどって Node-RED を起動したところまで戻ってください。これで、サービスの正確な名前を確認できます。ここに示されているように、サービス名は nodered という 1 つの単語です。したがって、ここには system control enable nodered service と入力します。サービスが有効になったので、sudo service nodered start と入力して、ブート時にサービスが起動されるようにします。サービスを停止するとしたら、sudo service nodered stop を実行すればサービスが停止します。

これで、このホーム・キット・モジュールをコマンド・ラインからインストールできます。または、Node-RED に戻って「Install (インストール)」をクリックするだけでインストールすることもできます。インストールには少々時間がかかりますが、完了すると、ノードのリストにモジュールが追加されて、2 つのノードが使用可能になっていることがわかります。





