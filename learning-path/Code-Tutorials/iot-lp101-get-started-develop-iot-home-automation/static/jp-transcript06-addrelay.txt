このプロジェクトを仕上げる最後のパーツとして、Raspberry Pi 上のピン 13 にリレーを接続しました。このリレーで、LED ストリップ・ライトを制御します。これにより、LED ライトのオン/オフをホーム・アプリから直接制御できるようになります。さらに、LED ライトをモーション・センサーに接続して、動きが検知されるたびに LED がトリガーされるようにもします。

再び PIR センサー・フローに取り組みましょう。ブザーはテストのために追加しただけなので、フローから削除しました。代えて、リレーに対応する GPIO ノードを追加します。この出力デバイスは、ピン 13 上にあります。このノードには「リレー」という名前を付けます。これから、PIR センサーが直接リレーにデータをフィールドするようにセットアップして、センサーがトリガーされるたびにライトが点灯するようにします。また、LED ライト用のホーム・キット・ノードもセットアップします。アクセサリーの新しいタイプとして LED ストリップを構成します。これにはカスタム・コードを入力できます。今回はセンサーではなく、電球タイプのアクセサリーになります。名前を付けます。このインスタンスを電球タイプとしてセットアップします。名前はただ「LED ストリップ」とします。

このノードをリレーに接続するのですが、その前に、LED ストリップ・オブジェクトから送られてくるメッセージ・ペイロードの内容を確認する必要があります。この場合もデバッグ・ノードを使って、このノードから送信されてくるメッセージの内容をログに記録します。次に、ホーム・キットをセットアップして、メッセージ・ペイロードの内容を確認します。ホーム・アプリに LED ライトを構成しておいたので、LED ライトをトリガーできるようになっています。オンにトリガーします。これが、ペイロードの内容です。「On」フィールドは 1 に設定されています。これを、カスタム関数を使用して設定する必要があります。これをホーム・キット・ノードに接続して、これをリレーに接続します。この関数内にメッセージ・ペイロードを作成し、関数が「On」プロパティーの値をホーム・キット・ノード
から取得し、その値を、リレーによって LED ライトをオンにトリガーするための数値に変換するようにします。これで、ホーム・アプリからメッセージを送信すると、LED ストリップ・ライトが点灯するようになります。

もう 1 つ必要な作業として、LED ライトの状態に、PIR センサーによって LED がオンにされているか、オフにされているかという事実が反映されるようにする必要があります。そのためには、PIR センサーがトリガーされるたびに、それに応じて LED ストリップ・ライトの状態が設定されるようにします。そのために、PIR センサーのペイロードから値を取得し、その値を「On」プロパティーにマッピングした上で、ホーム・キット・ノードに送信されるようにします。この変更をデプロイしました。これで、私がホーム・アプリから LED をトリガーするか、または PIR センサーによってトリガーされて LED が更新されるたびに、ホーム・アプリに表示される状態が、LED ストリップ・ライトの状態と一致するようになります。


