<dw-document xmlns:dw="http://www.ibm.com/developerWorks/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" local-site="worldwide" version="v18" xsi:noNamespaceSchemaLocation="../../schema/dw-document-8.0.xsd"><dw-article auto-number="yes" layout="ArticleStandard18" skill-level="3" toc="yes"><id cma-id="1047265" original="yes"/><keywords content="IoT, sensors, Node-RED, Raspberry Pi"/><meta-last-updated day="03" initials="corbinm@us.ibm.com" month="01" year="2018"/><content-area-primary name="iot"/><title>Get started developing IoT solutions by building a simple home
      automation system</title><subtitle>Build a smart doorbell with a Raspberry Pi, some sensors, a
      buzzer, Node-RED, and Apple Home Kit</subtitle><pdf pages="15" paperSize="common" size="2879 KB" url="iot-lp101-get-started-develop-iot-home-automation-pdf.pdf"/><author email="anna.m.gerber@gmail.com" email-cc="" jobtitle="Senior Software Developer" publish-email="no"><author-level>none</author-level><bio>Anna Gerber is a full-stack developer with 15 years experience in the
                university sector, formerly a Technical Project Manager at The University
                of Queensland ITEE eResearch specialising in Digital Humanities, and a
                Research Scientist at the Distributed System Technology Centre (DSTC).
                Anna is a JavaScript robotics enthusiast and maker and enjoys tinkering
                with soft circuits and 3D printers.</bio><author-name><GivenName>Anna</GivenName><FamilyName>Gerber</FamilyName></author-name><company-name/><social-networks><social-network><social-network-name>dW author profile</social-network-name><social-network-url>https://developer.ibm.com/author/anna.m.gerber/</social-network-url></social-network></social-networks></author><date-published day="30" month="06" year="2017"/><date-updated day="03" month="01" year="2018"/><social-media-meta><twitter-summary-card><twitter-card-title>Get started developing IoT solutions by building a
          simple home automation system</twitter-card-title><twitter-card-abstract>Get started developing IoT solutions quickly and
          easily. In just four steps, learn how you can build a simple home
          automation IoT solution. After you connect the sensors to the
          Raspberry Pi, you learn how to set up and configure the Pi. Then, you
          learn how to create Node-RED flows to set up the logic for the home
          automation system. Lastly, you learn how to install your prototyped
          system and begin using it.</twitter-card-abstract><twitter-card-img height="440" src="https://www.ibm.com/developerworks/i/twitterdw-topic-iot.png" width="880"/></twitter-summary-card></social-media-meta><abstract>Get started developing IoT solutions quickly and easily. In just
      four steps, learn how you can build a simple home automation IoT solution.
      After you connect the sensors to the Raspberry Pi, you learn how to set up
      and configure the Pi. Then, you learn how to create Node-RED flows to set
      up the logic for the home automation system. Lastly, you learn how to
      install your prototyped system and begin using it.</abstract><docbody><sidebar><heading>IoT 101: Getting started with IoT development</heading><p>This tutorial is part of the <a href="https://www.ibm.com/developerworks/library/iot-lp101-quick-start-guide-iot-developers/index.html" target="_blank">IoT 101 learning path</a>, a quick-start guide
                    for IoT developers.</p><ul><li><a href="https://developer.ibm.com/dwblog/2017/just-getting-started-iot-consider-7-key-iot-concepts-skills/" target="_blank">IoT concepts and skills</a></li><li><a href="https://www.ibm.com/developerworks/library/iot-lp101-best-hardware-devices-iot-project/index.html" target="_blank">IoT hardware guide</a></li><li><a href="https://www.ibm.com/developerworks/library/iot-lp101-connectivity-network-protocols/index.html" target="_blank">IoT networking guide</a></li><li><a href="https://www.ibm.com/developerworks/library/iot-lp101-why-use-iot-platform/index.html" target="_blank">IoT platforms</a></li><li>Tutorial: Build a simple home automation system (this tutorial)</li></ul></sidebar><p>Sometimes the most effective home automation projects are the ones that
        solve very simple problems.</p><p>Here's my simple home automation IoT solution. I have trouble hearing
        my door bell when I'm working upstairs wearing headphones, so I'm going
        to create a smart doorbell system:</p><ul><li>I'm going to add a motion sensor to the front door of my house that
          will activate whenever someone is at the front door. </li><li>I'll also add a temperature and humidity sensor that I can use to
          monitor the conditions outside my front door at any time, so I won't
          forget my coat or umbrella when I leave the house if I need them. </li><li>I'll use the PIR sensor to trigger a relay to turn on a strip of LED
          lights to make it easier to see to unlock the door when I get home
          after dark.</li></ul><p>I'll expose all of these sensors as <a href="https://developer.apple.com/homekit/">Apple Home Kit</a>
        devices. Home Kit is Apple's home automation framework that allows you
        to read from sensors and control smart devices that are installed in
        your home by using the Home app from an iPhone or iPad running iOS 10,
        so I'll be able to see the sensor readings from my phone (<xref href="#homekit"/>). </p><figure><heading refname="homekit">Custom Home Kit Raspberry Pi
          devices</heading><!-- actual width="392" height="696" --><img alt="" height="348" src="Picture1.png" width="196"/></figure><p>I'll step through how I built my home automation solution with Node-RED
        running on a Raspberry Pi with a handful of inexpensive sensors and
        actuator. You can use this tutorial to <a href="https://developer.ibm.com/dwblog/2017/just-getting-started-iot-consider-7-key-iot-concepts-skills/">build your IoT skills</a> and build a similar home automation
        solution, or you can adapt the concepts as you get started with
        developing your own IoT solutions. </p><video-container><video-id>h4tZi4I8WyU</video-id><thumbnail-image-url>video1thumbnail.jpg</thumbnail-image-url><video-title>Home Automation Tutorial - Introduction</video-title><video-description>In this video, Anna introduces the project and
          demonstrates the home automation system in action.</video-description><video-transcript-url>transcript01-intro.txt</video-transcript-url></video-container><heading alttoc="" inline-commenting-id="cmt_2" refname="prereqs" type="h2">What you’ll need to build this IoT
        solution</heading><p>To build this IoT solution, you'll need to be familiar with basic <a href="https://www.ibm.com/developerworks/web/library/wa-javascriptstart/index.html">JavaScript</a> and <a href="https://www.ibm.com/developerworks/library/iot-mqtt-why-good-for-iot/index.html">MQTT</a>. </p><p>I use a MacBook Pro as my development environment, however any Linux or
        Windows PC with wifi and equivalent software should be suitable. I used
        the following software and hardware to build my home automation
        system.</p><heading inline-commenting-id="cmt_21" refname="prereqs-software" type="h3">Software</heading><ul><li>Command-line SSH client</li><li>A text editor such as Sublime Text or Atom</li><li>SD card imaging software (<a href="https://etcher.io/">Etcher</a>)</li><li>Web Browser (preferably Google Chrome or Firefox)</li><li>Apple Home app (requires an Apple device such as an iPhone or iPad
          that runs iOS 10)</li><li>Raspbian Jessie (to install on micro SD card for Raspberry Pi)</li><li><a href="https://nodered.org/">Node-RED</a>, which is installed by
          default on the Raspberry Pi</li></ul><heading inline-commenting-id="cmt_22" refname="prereqs-hardware" type="h3">Hardware</heading><ul><li>Wireless network router</li><li>Raspberry Pi and accessories:<ul><li>Raspberry Pi Zero W or Raspberry Pi 3</li><li>40-pin header</li><li>Raspberry Pi case</li><li>Micro USB cable and USB power adapter (such as a phone
              charger)</li><li>8 GB micro SD card and adapter for writing to the card from your
              computer. Either a blank card or one preinstalled with Raspbian
              Jessie.</li></ul><p>A starter kit like <a href="https://www.adafruit.com/product/3410">this one</a> from
            AdaFruit comes with all of these accessories</p></li></ul><p>I'll be running my home automation device off a USB power supply
        plugged into the main power, so I won't need to worry about batteries or
        power management. Running off main power also means that it doesn’t have
        to be a priority for me to select a low power networking technology like
        Zigbee that would typically be adopted for commercial home automation
        systems. </p><p>Wifi was my preferred choice of networking technology for this project
        because I already have a Wifi network in my house, and the range of my
        home automation system only needs to reach within the local area network
        (LAN) in my house. Wifi also has the advantage of having a high data
        throughput, which means I should have no trouble gathering data from the
        connected sensors. You can read more about selecting networking
        technologies in my article "<a href="https://www.ibm.com/developerworks/library/iot-lp101-connectivity-network-protocols/index.html">Connecting all the things in the Internet of Things</a>."</p><p>I've chosen to use a Raspberry Pi Zero W but you could use any
        Raspberry Pi with wifi. The Raspberry Pi Zero W is a readily available,
        small, and inexpensive single-board computer with built-in Bluetooth and
        wifi, which makes it ideal for IoT solutions that need to hook in with
        an existing wifi network or integrate with consumer devices by using
        Bluetooth. The Raspberry Pi is a popular board among hobbyists, so there
        are many online resources and compatible devices available to support
        developers. I'll be running the device off a USB power supply plugged
        into the main power, so I won't need to worry about batteries or power
        management. </p><p>For more detail on the hardware requirements to consider when selecting
        hardware for IoT projects, read my <a href="https://www.ibm.com/developerworks/library/iot-lp101-best-hardware-devices-iot-project/index.html">IoT Hardware Guide</a>.</p><heading inline-commenting-id="cmt_21" refname="prereqs-electrics" type="h3">Electronic components</heading><ul><li><a href="https://www.adafruit.com/product/189">Passive Infra-read
            (PIR) Sensor</a>. I've used a Keyestudio pyroelectric sensor but any
          Arduino-compatible digital PIR sensor should work</li><li><a href="https://www.adafruit.com/product/1536">Piezo
          buzzer</a></li><li><a href="https://www.amazon.com/Phantom-YoYo-compatible-Temperature-Humidity/dp/B00AF22GDC/">DHT-11</a> or DHT-22 digital temperature and humidity sensor
          module</li><li>5V <a href="https://www.amazon.com/Indicator-Light-Channel-Module-Arduino/dp/B00P7QDJD2">relay</a> module</li><li><a href="https://www.amazon.com/Haitronic-Multicolored-Breadboard-Arduino-raspberry/dp/B01LZF1ZSZ/">Jumper wires</a></li><li>12 V <a href="https://www.amazon.com/WishShop-Strip-Light-NonwaterProof-White/dp/B01N3KPS10">LED strip</a> and <a href="https://www.amazon.com/Adapter-Transformers-Supply-Output-Listed/dp/B00DKSI0S8/">power adapter</a></li><li>Small solderless <a href="https://www.amazon.com/Gikfun-Solderless-Prototype-Breadboard-Arduino/dp/B0146MGBWI/">breadboard</a>. A breadboard is optional, because you can always
          just solder wires together instead if you prefer.<br/></li><li>These miscellaneous components:<ul><li>A small plastic container to house the device</li><li>Cable tie</li><li>Double-sided tape</li></ul></li></ul><p>I've selected an off-the-shelf <a href="https://en.wikipedia.org/wiki/Passive_infrared_sensor">Passive
          Infra-red (PIR)</a> sensor to detect motion, and a DHT-11 digital
        temperature and humidity sensor module to attach to my device. These
        sensors are both inexpensive digital 5V sensors that are compatible with
        both Arduino and Raspberry Pi. The Raspberry Pi does not have a hardware
        analog-to-digital converter on board, so digital sensors are a good
        choice over analog sensors that would require an additional
        analog-to-digital converter. The output components I'll be using include
        a Piezo buzzer element to beep whenever motion is detected during
        prototyping, and a 5V relay with a 12V LED strip that will be triggered
        by motion in the final iteration of the system.</p><heading inline-commenting-id="cmt_21" refname="prereqs-tools" type="h3">Tools</heading><ul><li>Philips head screwdriver</li><li>Hobby knife</li><li>Soldering iron</li></ul><heading alttoc="" inline-commenting-id="cmt_4" refname="connect-sensors" stepnum="1" type="h2">Connecting the sensors to the Raspberry Pi
        device</heading><p>Follow the steps in this video to connect the PIR sensor, buzzer, and
        DHT11 temperature and humidity sensor. Use the figures and table that
        follow the video to help you assemble the circuit.</p><video-container><video-id>y7yWGxtnul8</video-id><thumbnail-image-url>video2thumbnail.jpg</thumbnail-image-url><video-title>Home Automation Tutorial - Assembling the
          circuit</video-title><video-description>In this video, Anna demonstrates how to connect
          components to the GPIO pins on the Raspberry Pi Zero
          W.</video-description><video-transcript-url>transcript02-assemblecircuit.txt</video-transcript-url></video-container><p>If your Raspberry Pi did not come with the GPIO pins attached, you'll
        need to solder the pins onto the board first. The circuit that I used is
        shown in <xref href="#pi-circuit"/>. </p><figure><heading refname="pi-circuit">Circuit with sensors and buzzer (see <a href="#ack"><xref href="#ack"/></a>)</heading><img alt="" height="365" src="Picture2.png" width="400"/></figure><p>For each component, the positive pin connects to 5V, the negative pin
        connects to ground (GND), and the data pin connects to a GPIO pin on the
        Raspberry Pi pin headers, as shown in <xref href="#pi-head-gpio"/>. In
          <xref href="#pi-head-gpio"/>, the number of the pin in the headers is
        in the middle column, while the Raspberry Pi GPIO pin identifier is
        shown in the third column. The pin layout of the Raspberry Pi pins is
        provided in <xref href="#pi-pins"/> after the table.</p><table border="0" cellpadding="0" cellspacing="0" class="ibm-data-table" data-widget="datatable"><caption refname="pi-head-gpio">Raspberry Pi pin headers and GPIO pin
          numbers</caption><thead><tr><th>Sensor/Device</th><th>Pin header #</th><th>GPIO pin #</th></tr></thead><tbody><tr><td> PIR Sensor<br/>(Shown at the upper-left of <xref href="#pi-circuit"/>) </td><td> 7 </td><td> GPIO4 </td></tr><tr><td> Piezo Buzzer<br/>(Shown in middle of <xref href="#pi-circuit"/>) </td><td> 11 </td><td> GPIO17 </td></tr><tr><td> DHT-11 Sensor<br/>(Shown on the right of <xref href="#pi-circuit"/>) </td><td> 40 </td><td> GPIO21 </td></tr><tr><td> Relay<br/>(Shown on the right of <xref href="#pi-relay"/>) </td><td> 13 </td><td> GPIO22 </td></tr></tbody></table><p>When you attach components to the Raspberry Pi GPIO headers, refer to
        the pin diagram in <xref href="#pi-pins"/>.</p><figure><heading refname="pi-pins">Raspberry Pi GPIO pins (image source: <a href="http://elinux.org/File:Pi-GPIO-header.png">http://elinux.org/File:Pi-GPIO-header.png</a>)</heading><img alt="" height="595" src="Picture3.png" width="348"/></figure><heading alttoc="" inline-commenting-id="cmt_5" refname="setup-pi" stepnum="2" type="h2">Setting up the Raspberry Pi</heading><sidebar><p>If you have chosen to use a different Raspberry Pi with a wifi
          adapter that allows you to initially set up the Pi over an Ethernet
          cable, you can watch the Hands-on IoT video on developerWorks TV for
          directions on how to <a href="https://developer.ibm.com/tv/setting-up-your-raspberry-pi-without-a-keyboard-mouse-or-monitor/">set up your Pi without a keyboard, mouse, or monitor</a>.</p></sidebar><p>The Pi Zero is tiny, so it does not have full-sized ports for HDMI or
        USB on board. It is possible to add a mini-HDMI-to-HDMI cable or
        adapter, and also a micro-USB on-the-go adapter and USB hub to plug in a
        monitor, USB mouse, and keyboard. After you have the Raspberry Pi set
        up, however, you won't need those peripheral components, so I prefer to
        skip the dongles and configure the Pi Zero in headless mode. </p><p>Here are the steps to setting up your Raspberry Pi Zero W for this
        tutorial: </p><ul><li>Install the latest Raspian OS on the micro SD card</li><li>Add configuration files on the micro SD card</li><li>Start the Raspberry Pi Zero W</li><li>Start and set up Node-RED</li><li>Install additional Node-RED modules</li></ul><heading alttoc="" inline-commenting-id="cmt_6" refname="install-raspian" stepnum="2a" type="h3">Install the latest version of the Raspian
        OS on the micro SD card</heading><p>If you are using a micro SD card that was preinstalled with Raspbian,
        you can skip this step. However, if you are starting with a blank card,
        you'll first need to install the latest version of the Raspbian
        operating system onto the micro SD card. I'm using an 8 GB micro SD card
        and setting up the card from my MacBook by using an SD card adapter. You
        can follow along with the <a href="https://www.raspberrypi.org/documentation/installation/installing-images/README.md">instructions on the Raspberry Pi website</a>.</p><p>I am not planning on switching between operating systems, so for this
        project, I decided to use the Raspbian Jessie image, rather than NOOBS.
        I've installed the <a href="https://etcher.io/">Etcher</a> app, so
        flashing the image to the SD card is as simple as selecting the
        downloaded .zip file, selecting the micro SD card, and then clicking
          <strong>Flash</strong> (<xref href="#etcher"/>).</p><figure><heading refname="etcher">Installing Raspbian to the micro SD card by
          using Etcher</heading><img alt="" height="506" src="Picture4.png" width="938"/></figure><heading alttoc="" inline-commenting-id="cmt_6" refname="add-config" stepnum="2b" type="h3">Add configuration files on the micro SD
        card</heading><p>You also need to add some configuration files on the SD card to set up
        the wireless network settings to connect the Pi to the local
        network.</p><p>You need to add a file named <code>wpa_supplicant.conf</code> in the
        root of the SD card. This file contains the wifi settings, including the
        network password and SSID. Use a text editor like Sublime Text or Atom
        to edit the contents of the file, add the following lines and specify
        your values for the <code>ssid</code> and <code>psk</code> variables: </p><code-listing html-highlight="all-highlighting-off" line-numbering="no"><pre>
	network={
	    ssid="&lt;wifi network name&gt;"
	    psk="&lt;wifi password&gt;"
	}</pre></code-listing><p>You also need to add a file called <code>ssh</code> (the file itself
        doesn't need to contain any content) to the root level of the SD card.
        The presence of this file will enable SSH on the Pi when it starts
        up.</p><heading alttoc="" inline-commenting-id="cmt_6" refname="start-pi" stepnum="2c" type="h3">Start the Raspberry Pi Zero W</heading><p>Now you can insert the micro SD card into the Raspberry Pi Zero W, plug
        a micro USB cable into the power jack on the Pi, and power it up.</p><p>Assuming your wireless router is set up to automatically assign IP
        addresses to connected devices over DHCP, you won't know which IP
        address your Pi has been assigned to begin with. However, you can use
        <code>mDNS</code> with the <em>.local</em> special-use domain name to
        find and connect to the Pi without needing to know the address. The most
        common implementation of <code>mDNS</code> is Apple's Bonjour service.
        If you are on a Mac, this service will work out of the box. On Linux,
        this service is provided by Avahi (Zeroconf). On Windows, if you have
        iTunes installed, you will already have Bonjour installed. If not, the
        quickest way to get your Pi up and running is to install the <a href="https://support.apple.com/kb/DL999?locale=en_US">Apple Bonjour
          print services</a>. </p><p>By default, the Raspberry Pi is configured with the host name
          <em>raspberrypi</em> and the default user is <em>pi</em>, so you can
        connect to the Pi by using SSH:</p><code-listing html-highlight="all-highlighting-off" line-numbering="no"><pre>
ssh pi@raspberrypi.local</pre></code-listing><p>After you are connected to the Pi, you can run the
        <code>ifconfig</code> command to find its IP address, or check the
        startup messages when you run node-red. If you don't want to install
        Bonjour to use mDNS, you may prefer to check your home router DNS logs
        to find the IP address of the pi and substitute the IP address for the
        <code>raspberrypi.local</code> host name. </p><heading alttoc="" inline-commenting-id="cmt_6" refname="setup-nodered" stepnum="2d" type="h3">Starting, setting up Node-RED, and
        installing Node-RED modules</heading><sidebar><p>See this Hands-on IoT video on developerWorks TV for an <a href="https://developer.ibm.com/tv/an-introduction-to-node-red/">introduction to Node-RED</a>.</p></sidebar><p>Node-RED is a development tool with a visual web interface for wiring
        together IoT flows that connect physical devices, APIs, and other online
        services. Node-RED and node.js come installed by default with Raspbian
        Jessie, however the version that is bundled with it is a little old. So,
        one of the first things I did after I booted up the Raspberry Pi was to
        update Node-RED and node.js and also install some third-party modules to
        make it easier to work with the DHT-11 temperature sensor and home
        kit.</p><sidebar><p>You can read more about <a href="https://nodered.org/docs/hardware/raspberrypi">running
            Node-RED on Raspberry Pi</a> in the Node-RED documentation.</p></sidebar><p>Node-RED provides a graphical web interface for programming IoT flows.
        The flows connect nodes that represent physical devices and their
        attached sensors and actuators, with nodes that implement custom
        functions as well as nodes that provide interfaces to libraries or
        services, and specify how messages with data payloads are passed between
        them. We can add additional kinds of nodes by installing additional
        (contrib) modules. Modules can be added by using the web interface by
        going to the menu at the upper-right of the web interface, then
        selecting 'Manage palette' and searching for contributed modules under
        the Install tab in the sidebar on the left-hand-side of the screen.</p><p>In this video, I SSH into my Raspberry Pi Zero, start and upgrade
        Node-RED, and then install the node-red-contrib-homekit module that is
        used for integrating with the Apple <a href="https://www.apple.com/ios/home/">Home Kit</a>, all by using the
        web user interface.</p><video-container><video-id>dQWTYWNgAh4</video-id><thumbnail-image-url>video3thumbnail.png</thumbnail-image-url><video-title>Home Automation Tutorial - Setting up Node-RED on the
          Raspberry Pi</video-title><video-description>In this video, Anna demonstrates how to start and
          upgrade Node-RED on the Raspberry Pi Zero W and how to install
          additional home automation modules.</video-description><video-transcript-url>transcript03-setupnodered.txt</video-transcript-url></video-container><p>In addition to installing Node-RED modules by using the web interface,
        you can also install modules by using npm on the command line.</p><p>For example, install the homebridge module to allow integration with
        the Apple Home Kit accessories:</p><code-listing html-highlight="all-highlighting-off" line-numbering="no"><pre>
sudo npm install -g homebridge</pre></code-listing><p>To make it easier to work with the DHT11 temperature and humidity
        sensor, you need to install the node-red-contrib-dht-sensor module (<a href="https://flows.nodered.org/node/node-red-contrib-dht-sensor">https://flows.nodered.org/node/node-red-contrib-dht-sensor</a>). The
        documentation for this module lists a dependency on the BCM2835 library
        and the node-red-dht module. So, we'll need to install those modules
        first.<br/>The installation instructions and the latest version of the
        BCM2835 library are available at <a href="http://www.airspayce.com/mikem/bcm2835">http://www.airspayce.com/mikem/bcm2835</a>. From the command line on
        the Raspberry Pi, download and install the library by using the
        following commands:</p><code-listing html-highlight="all-highlighting-off"><pre>
	cd ~
	wget http://www.airspayce.com/mikem/bcm2835/bcm2835-1.52.tar.gz
	tar xzf bcm2835-1.52.tar.gz
	cd bcm2835-1.52.tar.gz
	./configure
	make
	sudo make check
	sudo make install</pre></code-listing><p>After you install the library, change to the <em>.node-red</em>
        directory and install the node-dht-sensor and the node-red-contrib-dht
        modules by using npm.</p><code-listing html-highlight="all-highlighting-off" line-numbering="no"><pre>
	cd ~/.node-red
	sudo npm install --unsafe-perm -g node-dht-sensor
	sudo npm install --unsafe-perm -g node-red-contrib-dht-sensor</pre></code-listing><figure><heading>Installing the Node-RED -contrib-dht module from npm</heading><img alt="" height="626" src="Picture5.png" width="940"/></figure><p>You can list the modules that you have installed from within the
        <code>.node-red</code> directory with <code>npm</code>: </p><code-listing html-highlight="all-highlighting-off" line-numbering="no"><pre>
	 npm ls --depth=0</pre></code-listing><p>I've found it's a good idea to restart Node-RED after I install modules
        manually:</p><code-listing html-highlight="all-highlighting-off" line-numbering="no"><pre>
	 sudo service nodered restart</pre></code-listing><p>After you install the DHT module, you'll see the additional DHT22 node
        type appear in your Node-RED palette (in the web interface).</p><heading alttoc="" inline-commenting-id="cmt_6" refname="create-flows" stepnum="3" type="h2">Creating flows with Node-RED</heading><p>I used Node-RED to set up the logic for my home automation system. I
        use it to read from and control the components hooked up to the
        Raspberry Pi's GPIO pins. I split the functions into two flows. The
        first flow reads from the PIR sensor and triggers the buzzer when motion
        is detected. It also exposes the PIR sensor reading to the Apple Home
        Kit (you can read more about the <a href="https://developer.apple.com/reference/homekit">home kit in the
          Apple documentation</a>). The second flow reads from the temperature
        and humidity sensor and sets up two Home Kit devices, one for the
        temperature, and one for the humidity, so that I'll be able to see these
        sensor values from the Home app.</p><heading alttoc="" inline-commenting-id="cmt_7" refname="PIR-flow" stepnum="3a" type="h3">Create the flow for the PIR motion
        sensor</heading><p>Follow the steps in the video to set up a Node-RED flow between the PIR
        sensor and Buzzer so that whenever the PIR sensor detects movements the
        buzzer beeps. I also configure an Apple Home Kit node so that the state
        of the motion sensor can be displayed in the Apple Home app on my
        phone.</p><video-container><video-id>99cgVSt_kGE</video-id><thumbnail-image-url>video4thumbnail.png</thumbnail-image-url><video-title>Home Automation Tutorial - Building Node-RED
          flows</video-title><video-description>In this video, Anna demonstrates how to use node-RED
          to build flows for the PIR sensor and buzzer.</video-description><video-transcript-url>transcript04-buildnoderedflows.txt</video-transcript-url></video-container><p>You can import the configuration for the completed flow from the <a href="https://github.com/AnnaGerber/Home_Automation_with_Raspberry_Pi_and_HomeKit_Node-red "><code>MotionSensor.json</code> file in my GitHub repo</a>. </p><p>To import a flow, go to the hamburger menu at the upper-right of the
        web interface, and select <strong>Import From &gt; Clipboard</strong>
        then paste in the configuration for the new flow.</p><heading alttoc="" inline-commenting-id="cmt_7" refname="dht11-flow" stepnum="3b" type="h3">Create the flow for the DHT11
        sensor</heading><p>Follow the steps in this video to add a second flow for the DHT11
        temperature and humidity sensor, and expose the sensors as Apple Home
        Kit devices so you can read the temperature in degrees Celsius, and the
        relative humidity as a percentage, from within the Home app.</p><video-container><video-id>Sn6rSD9tkuc</video-id><thumbnail-image-url>video5thumbnail.png</thumbnail-image-url><video-title>Home Automation Tutorial - Building more Node-RED
          flows</video-title><video-description>In this video, Anna demonstrates how to use Node-RED
          to build flows for the DHT11 temperature and humidity
          sensor.</video-description><video-transcript-url>transcript05-buildnoderedflows2.txt</video-transcript-url></video-container><p>You can import the completed temperature and humidity sensor flow from
        the <a href="https://github.com/AnnaGerber/Home_Automation_with_Raspberry_Pi_and_HomeKit_Node-red "><code>TemperatureAndHumiditySensor.json</code> file in my GitHub
          repo</a>.</p><p>You can share any of the flows that you create by exporting them to
        JSON format. To export a flow, select all of the nodes in the flow
        first, and then go to the hamburger menu and select
          <strong>Export</strong> (if you don't select any nodes, the export
        options are disabled).</p><label name="63outline"/><heading alttoc="" inline-commenting-id="cmt_7" refname="led-flow" stepnum="3c" type="h3">Create the flow for the LED strip
        lights</heading><p>Follow the steps in this video to add a relay to the circuit to turn an
        LED light strip on and off, and trigger this behavior with the PIR
        sensor. I also step through setting up a home kit device to view and
        control the state of the LED strip.</p><video-container><video-id>0Z2EHy1e2OM</video-id><thumbnail-image-url>video6thumbnail.jpeg</thumbnail-image-url><video-title>Home Automation Tutorial - Adding a relay and updating a
          flow for the LED lights</video-title><video-description>In this video, Anna demonstrates how to use Node-RED
          to add a relay for the LED lights and update a flow to control the
          lights.</video-description><video-transcript-url>transcript06-addrelay.txt</video-transcript-url></video-container><heading alttoc="" inline-commenting-id="cmt_7" refname="attach-relay" stepnum="3d" type="h3">Attaching the relay</heading><p>While the Piezo buzzer was great during prototyping for giving instant
        feedback on whether my door sensor was working, I found that it wasn't
        very loud after I put it inside the plastic box I was using as an
        enclosure, so I decided to remove it from the final version of my
        circuit. Removing the Piezo buzzer also gave me more space in the
        enclosure to install my <a href="https://en.wikipedia.org/wiki/Relay">relay</a>, the electrically controlled switch that is used to turn a
        strip of LED lights on and off again. </p><p>The circuit diagram for attaching the relay is shown in <xref href="#pi-relay"/>. As outlined in Table 1, The PIR motion sensor is
        attached to pin 7, the DHT11 temperature and humidity sensor is attached
        on pin 40, and the relay has been added on pin 13.</p><figure><heading refname="pi-relay">Home automation circuit with relay (see <a href="#ack"><xref href="#ack"/></a>) </heading><img alt="" height="608" src="Picture6.png" width="888"/></figure><p>Each component needs to be connected to a ground and 5V pin, and while
        there are plenty of ground pins, there are only two 5V pins on the Pi
        Zero, so you can either use a small breadboard or solder some wires
        together to share the 5V connection between all three components.</p><p>The LED strip needs to be powered by a separate 12V power supply, and
        wired up to the normally open (marked NO) terminals on the relay (<xref href="#pi-relay"/>) so that activating the relay will close these
        terminals, which will trigger the LED to light up.</p><heading alttoc="" inline-commenting-id="cmt_7" refname="install-sys" stepnum="4" type="h2">Installing the home automation system
        (smart doorbell)</heading><p>After you create all of the electronic circuits and Node-RED flows, the
        next step is to install the home automation system. I've bundled all of
        the wires and components together into an enclosure that is made from a
        clear plastic container with cutouts for the PIR sensor and cables. (I
        3D-printed a custom case and waterproofed it using silicone for a more
        permanent enclosure.)</p><p>This video steps you through connecting the relay and LED strip and
        bundling the components into a prototype enclosure.</p><video-container><video-id>VblGDtpZUKI</video-id><thumbnail-image-url>video7thumbnail.jpg</thumbnail-image-url><video-title>Home Automation Tutorial - Assembling the sensors and Pi
          into a box</video-title><video-description>In this video, Anna demonstrates how to put all the
          components into a plastic box to install on the front
          porch.</video-description><video-transcript-url>transcript07-installation.txt</video-transcript-url></video-container><figure><heading>Installed home automation system prototype</heading><!-- width="769" height="769" --><img alt="" height="384" src="Picture7.png" width="384"/></figure><heading alttoc="" inline-commenting-id="cmt_8" refname="summary" type="h2">Summary and next steps</heading><p>I've stepped through building the circuits and programming the flows
        for a basic Raspberry-Pi-based home automation system using Node-RED,
        with Apple Home Kit integration.</p><p>Some obvious improvements to this prototype system would be to add a
        light sensor and only trigger the LED strip to turn on when the strip is
        in shade or darkness. I have a Bluetooth Low Energy tag (Chipolo) on my
        house keys, and there is a Node-RED Chipolo module for reading these
        tags, so an alternative improvement would be to read the tag to
        recognize when I am approaching the door to turn the lights on, rather
        than triggering the lights by motion alone.</p><p> Because this home automation system is a prototype, I haven't focused
        on security, however by default Node-RED is not secured. So before
        installing this system, the next step would be to add authentication and
        secure the editor (See <a href="https://nodered.org/docs/security">https://nodered.org/docs/security</a>).</p><heading inline-commenting-id="cmt81" refname="ack" type="h3">Acknowledgements</heading><p>The author used the circuit diagrams from these fritzing components to
        create her own circuit diagrams for this tutorial:</p><ul><li>AdaFruit library:<br/><a href="https://github.com/adafruit/Fritzing-Library/">https://github.com/adafruit/Fritzing-Library/</a></li><li>DHT11 sensor module:<br/><a href="http://fritzing.org/projects/ky-015-temperature-and-humidity-sensor-module">http://fritzing.org/projects/ky-015-temperature-and-humidity-sensor-module</a></li><li>PIR Sensor and relay:<br/><a href="https://github.com/rwaldron/fritzing-components/blob/master/components/keyes-relay.fzpz">https://github.com/rwaldron/fritzing-components/blob/master/components/keyes-relay.fzpz</a></li></ul><!--000 RELATED TOPICS --><related-topics-block><link><text>IoT articles and tutorials on developerWorks</text><url>https://www.ibm.com/developerworks/learn/iot/</url></link><link><text>Hands-on IoT videos on developerWorks TV</text><url>https://developer.ibm.com/tv/hands-on-iot/</url></link><link><text>All IoT videos on developerWorks TV</text><url>https://developer.ibm.com/tv/iot/</url></link><link><text>Community-contributed tutorials on developerWorks Recipes</text><url>https://developer.ibm.com/recipes/tutorials/category/internet-of-things-iot/</url></link><link><text>IoT courses for developers</text><url>https://developer.ibm.com/courses/all/category/iot/</url></link></related-topics-block></docbody></dw-article><!-- PUB_TO_MAV --></dw-document>